" ######################################################################
"  VIM Settings
" ######################################################################

" ======================================================================
"  Introduction
" ======================================================================

" Configuration file for Vi-Improved.
"
" Settings are organized in sections
"   - initial setup
"       Settings that can be done before the plugins are loaded.
"       E.g. mapleader
"   - plugins
"       Loading and configuration of plugins. Configuration should be
"       confined to a single plugin.
"   - setup
"       Settings that are not confined to a single plugin.
"       E.g. statusline
"   - Other commands, functions, and mappings
"       My own commands, functions, and mappings, that may depend on
"       certain plugins to be loaded, but don't explicitely refer to
"       a certain plugin.
"   - Autocommands
"       Various autocommands. Mainly, custom file-type detection and file-type
"       settings.
"
" The setup sections should try to adhere to the order defined by the
" `:options` command. I.e.:
"      1 important
"      2 moving around, searching and patterns
"      3 tags
"      4 displaying text
"      5 syntax, highlighting and spelling
"      6 multiple windows
"      7 multiple tab pages
"      8 terminal
"      9 using the mouse
"     10 GUI
"     11 printing
"     12 messages and info
"     13 selecting text
"     14 editing text
"     15 tabs and indenting
"     16 folding
"     17 diff mode
"     18 mapping
"     19 reading and writing files
"     20 the swap file
"     21 command line editing
"     22 executing external commands
"     23 running make and jumping to errors
"     24 language specific
"     25 multi-byte characters
"     26 various


" ======================================================================
"  initial setup
" ======================================================================
" Settings that can be done before the plugins are loaded.
" E.g. mapleader

" ----------------------------------------------------------------------
"  Easy-Vim mode
" ----------------------------------------------------------------------
" If run as evim (easy vim), don't perform any settings.
if v:progname =~? "evim"
  finish
endif

" ----------------------------------------------------------------------
"  important
" ----------------------------------------------------------------------
set nocompatible

" ----------------------------------------------------------------------
"  moving around, searching and patterns
" ----------------------------------------------------------------------
" do incremental searching
set incsearch
" Searching test will find test, Test, tEst, etc.
" while search Test will find Test.
set ignorecase smartcase

" ----------------------------------------------------------------------
"  tags
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  displaying text
" ----------------------------------------------------------------------
set scrolloff=3
if has("multi_byte")
  " Nice characters in listing mode
  "   unicode values: ▸ 9656(x25B8), ╴ 9588(x2574), ¬ 172(xAC),
  "                   ⍽ 9085(x237D), ␣ 9251(x2423), ↪ 8618(x21AA)
  set listchars=tab:▸\ ,eol:¬,nbsp:⍽,trail:␣
  set showbreak=↪\ \ 
endif
set linebreak
command! -nargs=* Wrap set wrap linebreak nolist
command! -nargs=* Nowrap set nowrap

" ----------------------------------------------------------------------
"  syntax, highlighting and spelling
" ----------------------------------------------------------------------
if &t_Co > 2 || has("gui_running")
  " Switch syntax highlighting on, when the terminal has colors
  syntax on
  " Highlight strings inside C-comments.
  let c_comment_strings=1
  " Also switch on highlighting the last used search pattern.
  set hlsearch
endif

" Set default set of spell-checking languages. Spell-checking itself
" should be activated by ftplugins or autocommands.
set spelllang=de,en

" color column - Highlight column to emphasize textwidth.
if exists('+colorcolumn')
  set colorcolumn=+1
endif

" ----------------------------------------------------------------------
"  multiple windows
" ----------------------------------------------------------------------
" Let's you hide unsaved buffers.
set hidden

" When jumping to another buffer, jump to the first open window, that contains
" that buffer. If there is none, open the buffer in the current window.
set switchbuf=useopen

" ----------------------------------------------------------------------
"  multiple tab pages
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  terminal
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  using the mouse
" ----------------------------------------------------------------------
" In many terminal emulators the mouse works just fine, thus enable it.
set mouse=a

" ----------------------------------------------------------------------
"  GUI
" ----------------------------------------------------------------------
" These settings should be done in .gvimrc.

" ----------------------------------------------------------------------
"  printing
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  messages and info
" ----------------------------------------------------------------------
" show the cursor position all the time
set ruler
" display incomplete commands
set showcmd

" ----------------------------------------------------------------------
"  selecting text
" ----------------------------------------------------------------------
" Yank to system clip board by default
set clipboard=unnamed

" ----------------------------------------------------------------------
"  editing text
" ----------------------------------------------------------------------
" Allow backspacing over everything in insert mode.
set backspace=indent,eol,start
" Max linewidth.
set textwidth=79
" Default format options  [refer to fo-table]
"   autowrap text+comments, auto comment, allow `gq', numbered lists
set formatoptions=tcroqn

" ----------------------------------------------------------------------
"  tabs and indenting
" ----------------------------------------------------------------------
set shiftwidth=4
" Effective tabstop in insert mode. Doesn't touch tabstop, though.
set softtabstop=4
" Tabulator am Zeilenanfang auf sw setzen.
" Shiftwidth at beginning of line, softtabstop within line.
set smarttab
" Shift to fixed steps of shiftwidth
set shiftround
" Expand tabs to white spaces.
set expandtab
" Always set autoindenting on.
set autoindent

" ----------------------------------------------------------------------
"  folding
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  diff mode
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  mapping
" ----------------------------------------------------------------------
let mapleader = ','

" ----------------------------------------------------------------------
"  reading and writing files
" ----------------------------------------------------------------------
if has("vms")
  " do not keep a backup file, use versions instead
  set nobackup
else
  " keep a backup file
  set backup
endif
" Automatically re-read files that were changed outside of vim.
set autoread

" ----------------------------------------------------------------------
"  the swap file
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  command line editing
" ----------------------------------------------------------------------
" keep 50 lines of command line history
set history=50
" Store undo history [refer to http://amix.dk/blog/post/19548]
if exists('+undofile')
  set undofile
endif
" Tab-completion menu for ex-commands.
set wildmenu
set wildmode=list:longest,full
if exists('&wildignorecase')
  set wildignorecase
endif

" ----------------------------------------------------------------------
"  executing external commands
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  running make and jumping to errors
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  language specific
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  multi-byte characters
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  various
" ----------------------------------------------------------------------
" Allow moving after the end of line in visual block mode.
" ctrl+v $ still selects to individual line ends.
set virtualedit+=block

" Python virtualenv 
" ------------------
" !!! Should be taken care of by python-mode
" Be aware of a python virtualenv.
"   [http://sontek.net/turning-vim-into-a-modern-python-ide#virtualenv]
" if !empty($VIRTUAL_ENV)
" python << EOF
" import os.path
" import sys
" import vim
" if 'VIRTUAL_ENV' in os.environ:
"   project_base_dir = os.environ['VIRTUAL_ENV']
"   sys.path.insert(0, project_base_dir)
"   activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
"   execfile(activate_this, dict(__file__=activate_this))
" EOF
" endif

" cscope setup
" ------------
" TODO: Compare to [http://cscope.sourceforge.net/cscope_vim_tutorial.html]
" [refer to http://vim.wikia.com/wiki/Cscope]
if has('cscope')
  set cscopetag cscopeverbose

  if has('quickfix')
    set cscopequickfix=s-,c-,d-,i-,t-,e-
  endif

  " TODO: default to `cscope.out'
  cnoreabbrev csa cs add
  cnoreabbrev csf cs find
  cnoreabbrev csk cs kill
  cnoreabbrev csr cs reset
  cnoreabbrev css cs show
  cnoreabbrev csh cs help
  cnoreabbrev cmk make cscope

  " Add the following to your Makefile:
  "     # Build the cscope database.
  "     # This may search more files than necessary.
  "     .PHONY: cscope csclean
  "     csclean:
  "             -rm -vf cscope.out
  "     cscope.out:
  "             cscope -bv ./*.[ch] ./*.cpp ./*.cc
  "     cscope: csclean cscope.out  ;

  command! -nargs=0 Cscope cs add $VIMSRC/src/cscope.out $VIMSRC/src
endif


" ======================================================================
"  Plugins
" ======================================================================
" Loading and configuration of plugins. Configuration should be
" confined to a single plugin.

" ----------------------------------------------------------------------
"  Pathogen setup
" ----------------------------------------------------------------------
" Pathogen is used for a few plugins that seem incompatible with vundle.
" These lines have to be called before enabling filetype detection.
call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

" Alternate
" ---------
map <leader>a :A<CR>

" LaTeX-Suite
" -----------
let g:Tex_DefaultTargetFormat='pdf'
if executable('evince')
  let g:Tex_ViewRule_pdf='evince'
endif
let g:Tex_UseMakefile=1

" TODO: Really necessary?
" set grepprg=grep\ -nH\ $*\ /dev/null

" ----------------------------------------------------------------------
"  Vundle setup
" ----------------------------------------------------------------------
" Vundle manages plugins available from github and similar sources.
" [https://github.com/gmarik/vundle]
set rtp+=$HOME/.vim/vundles/vundle
call vundle#rc($HOME . '/.vim/vundles')

" Let Vundle manage itself. Required!
Bundle 'gmarik/vundle'

" Vim script libraries
" --------------------
Bundle 'L9'
" Asynchronous execution of shell commands. Required by easytags.vim
" Required by snipmate.
Bundle 'MarcWeber/vim-addon-mw-utils'
" Required by snipmate.
Bundle 'tomtom/tlib_vim'
" Allow `.` repeat for many operations.
Bundle 'tpope/vim-repeat'

" Shell
" -----
Bundle 'shell.vim--Odding'
let g:shell_mappings_enable = 0
nmap <silent> go :Open<CR>

" Vimball handling
" ----------------
" Bundle 'Vimball'

" Local vim configuration
" -----------------------
Bundle 'MarcWeber/vim-addon-local-vimrc'

" Language-specific syntax files
" ------------------------------

" Code completion
" ---------------
" Bundle 'Rip-Rip/clang_complete'
" unfortunately too slow
" let g:clang_complete_auto = 0
" if filereadable($HOME.'/usr/lib/libclang.so')
"   let g:clang_use_library = 1
"   let g:clang_library_path = $HOME.'/usr/lib'
" endif

" Bundle 'Shougo/neocomplcache'
" let g:neocomplcache_enable_at_startup = 0
" let g:neocomplcache_enable_camel_case_completion = 1
" let g:neocomplcache_enable_underbar_completion = 1
" let g:neocomplcache_enable_fuzzy_completion = 1

" Python plugins
" --------------
" %-matching for if/then/else etc. in python.
" Bundle 'python_match.vim'
" displays cute unicode characters instead of lambda/sum/in/not/etc.
" Bundle 'ehamberg/vim-cute-python'
" TODO: Have a look at [https://github.com/davidhalter/jedi-vim]
Bundle 'klen/python-mode'
" Python-mode
" refer to [http://unlogic.co.uk/posts/vim-python-ide.html]
" Activate rope
" Keys:
" K             Show python docs
" <Ctrl-Space>  Rope autocomplete
" <Ctrl-c>g     Rope goto definition
" <Ctrl-c>d     Rope show documentation
" <Ctrl-c>f     Rope find occurrences
" <Leader>b     Set, unset breakpoint (g:pymode_breakpoint enabled)
" [[            Jump on previous class or function
"               (normal, visual, operator modes)
" ]]            Jump on next class or function
"               (normal, visual, operator modes)
" [M            Jump on previous class or method
"               (normal, visual, operator modes)
" ]M            Jump on next class or method
"               (normal, visual, operator modes)
let g:pymode_rope = 1

" No rope completion - too slow!
let g:pymode_rope_vim_completion = 0
let g:pymode_rope_extended_completion = 0
let g:pymode_rope_map_space = 0

" Documentation
let g:pymode_doc = 1
let g:pymode_doc_key = 'K'

" Linting
" switched off by default - too slow!
let g:pymode_lint = 0
let g:pymode_lint_checker = "pyflakes,pep8"
" Auto check on save
let g:pymode_lint_write = 1

" Support virtualenv
let g:pymode_virtualenv = 1

" Enable breakpoints plugin
let g:pymode_breakpoint = 1
let g:pymode_breakpoint_key = '<leader>b'

" syntax highlighting
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all

" Don't autofold code
" let g:pymode_folding = 0

" IPython bindings
" ----------------
Bundle 'ivanov/vim-ipython'
=======
" IPython bindings
" ----------------
Bundle 'ivanov/vim-ipython'
" Run IPython as `ipython console` (ipython console --pylab works too).
" Then run `:IPython` in vim-session.
" Mappings:
" <leader>d : Show documentation of word under cursor (ipy object?).
" <C-F9> : Run current file through %run magic.
" <F9> : Run current line/visual selection.
" <M-F9> : Run current line/visual selection, but dedent first.
" <S-F9> : Toggle - Reselect after sending.
" <C-X><C-U> : IPython completion function. (TODO: SuperTab?)
" No default mappings:
let g:ipy_perform_mappings = 0
map <silent> <C-F9> :python run_this_file()<CR>
map <silent> <F9> :python run_this_line()<CR>
vmap <silent> <F9> :python run_these_lines()<CR>
map <silent> <M-F9> :python dedent_run_this_line()<CR>
vmap <silent> <M-F9> :python dedent_run_these_lines()<CR>
map <silent> <leader>d :py get_doc_buffer()<CR>
" map <silent> <leader>s :py if update_subchannel_msgs(force=True): echo("vim-ipython shell updated",'Operator')<CR>
" Reselect lines after sending. Default: Off.
map <silent> <S-F9> :python toggle_reselect()<CR>
" Breakpoints don't quite work yet.
"map <silent> <C-F6> :python send('%pdb')<CR>
"map <silent> <F6> :python set_breakpoint()<CR>
"map <silent> <s-F6> :python clear_breakpoint()<CR>
"map <silent> <F7> :python run_this_file_pdb()<CR>
"map <silent> <s-F7> :python clear_all_breaks()<CR>
" map <C-F5> :call <SID>toggle_send_on_save()<CR>
"" Example of how to quickly clear the current plot with a keystroke
"map <silent> <F12> :python run_command("plt.clf()")<cr>
"" Example of how to quickly close all figures with a keystroke
"map <silent> <F11> :python run_command("plt.close('all')")<cr>

"pi custom
" map <silent> <C-Return> :python run_this_file()<CR>
" map <silent> <C-s> :python run_this_line()<CR>
" imap <silent> <C-s> <C-O>:python run_this_line()<CR>
" map <silent> <M-s> :python dedent_run_this_line()<CR>
" vmap <silent> <C-S> :python run_these_lines()<CR>
" vmap <silent> <M-s> :python dedent_run_these_lines()<CR>
" map <silent> <M-c> I#<ESC>
" vmap <silent> <M-c> I#<ESC>
" map <silent> <M-C> :s/^\([ \t]*\)#/\1/<CR>
" vmap <silent> <M-C> :s/^\([ \t]*\)#/\1/<CR>

" Comment plugin
" --------------
" Bundle 'tpope/vim-commentary'
Bundle 'scrooloose/nerdcommenter'
let NERDRemoveExtraSpaces = 1
let NERDSpaceDelims = 1

" Syntax check on buffer save
" ---------------------------
Bundle 'scrooloose/syntastic'
let g:syntastic_enable_signs = 1
" let g:syntastic_auto_jump = 1
" Either type :Errors or use <leader>lo to open the location list.
let g:syntastic_auto_loc_list = 2
let g:syntastic_stl_format = '%E{%eE}%W{%wW}!'
let g:syntastic_mode_map = { 'mode': 'active',
      \ 'active_filetypes': [],
      \ 'passive_filetypes': ['c', 'cpp', 'tex', 'python'] }

" Git plugins
" -----------
" Gitk within vim.
" Bundle 'gregsexton/gitv'
" All-mighty git integration.
Bundle 'tpope/vim-fugitive'
if has("autocmd")
  augroup Fugitive
    au!
    autocmd BufEnter fugitive://*
	  \ if fugitive#buffer().type() =~# '^\%(tree\|blob\)' |
	  \   nnoremap <buffer> .. :edit %:h<CR> |
	  \ endif |
	  \ set bufhidden=delete |
  augroup END
endif

" Gist plugin
" -----------
" Gist integration into vim.
" Bundle 'mattn/gist-vim'
" let g:gist_clip_command = 'xclip -selection clipboard'
" let g:gist_detect_filetype = 1
" let g:gist_open_browser_after_post = 1

" Hex-color editing
" -----------------
" Highlights hex-colors with their actual color.
" Bundle 'yurifury/hexHighlight'

" Various editing plugins
" -----------------------
" Visualize indentation level.
" Bundle 'Indent-Guides'
" Bundle 'Justify'
" <C-A>/<C-X> for dates.
" Bundle 'tpope/vim-speeddating'
" Quickly edit surroundings.
Bundle 'tpope/vim-surround'
" Leave visual mode s mapping alone.
xmap <leader>s <Plug>Vsurround

" Rainbow parenthesis
" -------------------
" Rainbow colors help count pairs of parenthesis.
Bundle 'rainbow_parentheses.vim'
nmap <silent> <leader>rb<space> :RainbowParenthesesToggle<CR>
nmap <silent> <leader>rb( :RainbowParenthesesLoadRound<CR>
nmap <silent> <leader>rb[ :RainbowParenthesesLoadSquare<CR>
nmap <silent> <leader>rb{ :RainbowParenthesesLoadBraces<CR>
nmap <silent> <leader>rb< :RainbowParenthesesLoadChevrons<CR>

" Tabularize
" ----------
" Arange text in tables.
Bundle 'godlygeek/tabular'
" short-keys [http://vimcasts.org/episodes/aligning-text-with-tabular-vim/]
nmap <Leader>t= :Tabularize /=<CR>
vmap <Leader>t= :Tabularize /=<CR>
" [:help \zs, :help \ze]
nmap <Leader>t: :Tabularize /:\zs<CR>
vmap <Leader>t: :Tabularize /:\zs<CR>

" Automatical alignment
"   [http://vimcasts.org/episodes/aligning-text-with-tabular-vim/]
"   requires that the first line of the table is already aligned.
"   I.e. | 1 | 2 | 3 | rather than |1|2|3|.
inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction

" Various mappings
" ----------------
" Improved character motion t/f/T/F
Bundle 'Lokaltog/vim-easymotion'
" Various mappings for switching buffers, etc.
Bundle 'tpope/vim-unimpaired'

" Templates and snippets
" ----------------------
" Text Mate like snippet manager
Bundle 'garbas/vim-snipmate'
" Snippet collection for snipmate.
Bundle 'snipmate-snippets'
" To redifine the trigger key, refer tp :help snipMate-remap
" Indentation is affected by softtabstop or expandtab
let g:snips_author = 'Andreas Herrmann'

" Source code browsing
" --------------------
" Side pane display of code tags.
" Bundle 'taglist.vim'
" nnoremap <F4> :TlistToggle<CR>
" Side pane display of code tags.
Bundle 'majutsushi/tagbar'
"  Show tagbar on the left side. Expand gvim window when doing so.
let g:tagbar_left = 1
let g:tagbar_expand = 1
nnoremap <F4> :TagbarToggle<CR>
" list FIXME/TODO/XXX comments.
" Bundle 'TaskList.vim'

" Undo managers
" -------------
Bundle 'sjl/gundo.vim'
nnoremap <F3> :GundoToggle<CR>

" File managers/explorers
" -----------------------
" Bundle 'FuzzyFinder'
" let g:fuf_modesDisable = []
" let g:fuf_mrufile_maxItem = 400
" let g:fuf_mrucmd_maxItem = 400
" nnoremap <silent> <leader>sj     :FufBuffer<CR>
" nnoremap <silent> <leader>sk     :FufFileWithCurrentBufferDir<CR>
" nnoremap <silent> <leader>sK     :FufFileWithFullCwd<CR>
" nnoremap <silent> <leader>s<C-k> :FufFile<CR>
" nnoremap <silent> <leader>sl     :FufCoverageFileChange<CR>
" nnoremap <silent> <leader>sL     :FufCoverageFileChange<CR>
" nnoremap <silent> <leader>s<C-l> :FufCoverageFileRegister<CR>
" nnoremap <silent> <leader>sd     :FufDirWithCurrentBufferDir<CR>
" nnoremap <silent> <leader>sD     :FufDirWithFullCwd<CR>
" nnoremap <silent> <leader>s<C-d> :FufDir<CR>
" nnoremap <silent> <leader>sn     :FufMruFile<CR>
" nnoremap <silent> <leader>sN     :FufMruFileInCwd<CR>
" nnoremap <silent> <leader>sm     :FufMruCmd<CR>
" nnoremap <silent> <leader>su     :FufBookmarkFile<CR>
" nnoremap <silent> <leader>s<C-u> :FufBookmarkFileAdd<CR>
" vnoremap <silent> <leader>s<C-u> :FufBookmarkFileAddAsSelectedText<CR>
" nnoremap <silent> <leader>si     :FufBookmarkDir<CR>
" nnoremap <silent> <leader>s<C-i> :FufBookmarkDirAdd<CR>
" nnoremap <silent> <leader>st     :FufTag<CR>
" nnoremap <silent> <leader>sT     :FufTag!<CR>
" nnoremap <silent> <leader>s<C-]> :FufTagWithCursorWord!<CR>
" nnoremap <silent> <leader>s,     :FufBufferTag<CR>
" nnoremap <silent> <leader>s<     :FufBufferTag!<CR>
" vnoremap <silent> <leader>s,     :FufBufferTagWithSelectedText!<CR>
" vnoremap <silent> <leader>s<     :FufBufferTagWithSelectedText<CR>
" nnoremap <silent> <leader>s}     :FufBufferTagWithCursorWord!<CR>
" nnoremap <silent> <leader>s.     :FufBufferTagAll<CR>
" nnoremap <silent> <leader>s>     :FufBufferTagAll!<CR>
" vnoremap <silent> <leader>s.     :FufBufferTagAllWithSelectedText!<CR>
" vnoremap <silent> <leader>s>     :FufBufferTagAllWithSelectedText<CR>
" nnoremap <silent> <leader>s]     :FufBufferTagAllWithCursorWord!<CR>
" nnoremap <silent> <leader>sg     :FufTaggedFile<CR>
" nnoremap <silent> <leader>sG     :FufTaggedFile!<CR>
" nnoremap <silent> <leader>so     :FufJumpList<CR>
" nnoremap <silent> <leader>sp     :FufChangeList<CR>
" nnoremap <silent> <leader>sq     :FufQuickfix<CR>
" nnoremap <silent> <leader>sy     :FufLine<CR>
" nnoremap <silent> <leader>sh     :FufHelp<CR>
" nnoremap <silent> <leader>se     :FufEditDataFile<CR>
" nnoremap <silent> <leader>sr     :FufRenewCache<CR>

" Buffer managers/explorers
" -------------------------
" Delete buffer, without closing window.
Bundle 'bufkill.vim'
" File browser
Bundle 'scrooloose/nerdtree'
map <F2> :NERDTreeToggle<CR>

" Vim as a sticky-note manager
" ----------------------------
Bundle 'xolox/vim-notes'
let g:notes_directory = '~/.dotfiles/vim/notes'

" Project manager
" ---------------
" Bundle 'tmallen/proj-vim'

" Shell inside vim
" ----------------
" Bundle 'Conque-Shell'

" Documentation browser
" ---------------------
" Bundle 'info.vim'

" Colorschemes
" ------------
" Scroll through available color-schemes.
" Bundle 'ScrollColors'
" Translate gui-colorschemes to 265-color terminal colorschemes.
" Bundle 'godlygeek/csapprox'
Bundle 'altercation/vim-colors-solarized'
" Bundle 'jonathanfilip/vim-lucius'  " Doesn't seem to work through ssh.
Bundle 'nanotech/jellybeans.vim'


" ----------------------------------------------------------------------
"  System plugins setup
" ----------------------------------------------------------------------
" set rtp+=/usr/share/vim/current  " Not sure if necessary.


" ======================================================================
"  setup
" ======================================================================
" Settings that are not confined to a single plugin.
" E.g. statusline

" ----------------------------------------------------------------------
"  important
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  moving around, searching and patterns
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  tags
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  displaying text
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  syntax, highlighting and spelling
" ----------------------------------------------------------------------
" Set console color scheme.
" TODO: Tango colorscheme or terminal solarized.
if !has('gui_running')
  if &t_Co >= 256
    colorscheme jellybeans
  elseif &t_Co >= 88
    colorscheme zenburn
  else
    colorscheme delek
  endif
endif

" ----------------------------------------------------------------------
"  multiple windows
" ----------------------------------------------------------------------
" Always show status line.
set laststatus=2
" Status line
" Include encoding and byte order mark (bomb)
" [http://vim.wikia.com/wiki/Show_fileencoding_and_bomb_in_the_status_line]
" TODO: Separate into several statusline+= lines. Extract conditions.
set statusline=%<
      \%{(exists('*SyntasticStatuslineFlag')?SyntasticStatuslineFlag():\"\")}
      \%f%h%m%r
      \%{(exists('*fugitive#statusline')?fugitive#statusline():\"\")}
      \\ [%{&ff}]%{\"
      \[\".(&fenc==\"\"?&enc:&fenc).
      \((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\").
      \\"]\"}%=\ [\%03b,x\%02B]\ [%v,%l][%p%%][%L]

" ----------------------------------------------------------------------
"  multiple tab pages
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  terminal
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  using the mouse
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  GUI
" ----------------------------------------------------------------------
" These settings should be done in .gvimrc.

" ----------------------------------------------------------------------
"  printing
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  messages and info
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  selecting text
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  editing text
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  tabs and indenting
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  folding
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  diff mode
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  mapping
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  reading and writing files
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  the swap file
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  command line editing
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  executing external commands
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  running make and jumping to errors
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  language specific
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  multi-byte characters
" ----------------------------------------------------------------------

" ----------------------------------------------------------------------
"  various
" ----------------------------------------------------------------------


" ======================================================================
"  Other commands, functions, and mappings
" ======================================================================
" My own commands, functions, and mappings, that may depend on certain plugins
" to be loaded, but don't explicitely refer to a certain plugin.

" Various mappings
" ----------------
" Don't use Ex mode, use Q for formatting
map Q gq

" Visually select the text that was last edited/pasted
nmap gV `[v`]

" Schneller Zugang zur Hilfe automatisch zum Wort unter dem Cursor
map <F1> <ESC>:exec "help ".expand("<cWORD>")<CR>

" toggle folds with space bar
nnoremap <space> za

" Vimrc folding
" -------------
" Motivated by [https://gist.github.com/sjl/1038710]
" Custom fold expression with
" level 1 headers:  " ======...===={70}
"                   "  Title
"                   " ======...===={70}
" level 2 headers:  " ------...----{70}
"                   "  Title
"                   " ------...----{70}
" level 3 headers:  " Title
"                   " -----
func! Foldexpr_vimrc(lnum)
  let l1 = getline(a:lnum)

  if l1 =~ '^\s*$'
    " ignore empty lines
    return '='
  endif

  let l2 = getline(a:lnum+1)
  let l3 = getline(a:lnum+2)

  if l1 =~ '^" =\{70}$' && l3 =~ '^" =\{70}$' && l2 =~ '^"  \S.*$'
    return '>1'
  elseif l1 =~ '^" -\{70}$' && l3 =~ '^" -\{70}$' && l2 =~ '^"  \S.*$'
    return '>2'
  elseif l1 =~ '^" \S.*$' && l2 =~ '^" -\+$'
    return '>3'
  elseif l1 =~ '^" #\{70}$'
    return '>0'
  else
    return '='
  endif
endfunc

" Custom fold text
" FIXME: Flawed, if foldlevel jumps from 1 to 3. Vim introduces a level 2
"        folding in between, and the title of this folding is non-sense.
func! Foldtext_vimrc()
  if v:foldlevel == 1 || v:foldlevel == 2
    let titleline = getline(v:foldstart+1)
  else
    let titleline = getline(v:foldstart)
  endif
  let title = substitute(titleline, '^"\s*\(.*\S\)\s*$', '\1', '')
  let num = v:foldend - v:foldstart + 1
  return '+' . v:folddashes . ' ' . title . ' [' . num . '] '
endfunc

" DiffOrig
" --------
" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
command! DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
	 	\ | wincmd p | diffthis

" Edit and source vim configuration.
" ----------------------------------
com! Evimrc tabedit $MYVIMRC
com! Egvimrs tabedit $MYGVIMRC
com! Sorc source $MYVIMRC |
      \if has('gui_running') | source $MYGVIMRC | endif | let &ft=&ft

" cd into the directory the current buffer is in.
com! CD cd %:p:h
com! LCD lcd %:p:h

" Preserve cursor position.
" -------------------------
" A function, that preserves the cursor position while executing a command.
function! Preserve(command)
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

" Act on whole file
" -----------------

" Strip trailing white spaces
nmap <silent> _$ :call Preserve("%s/\\s\\+$//e")<CR>

" Align whole file
nmap <silent> _= :call Preserve("normal gg=G")<CR>

" Underlining tool
" ----------------
" Underline the current line with '-', or given characters
function! s:Underline(chars)
  let chars = empty(a:chars) ? '-' : a:chars
  let nb_chars = len(chars)
  let nb_columns = virtcol('$') - 1
  if has('float')
    let nb_insertions = floor(nb_columns / str2float(nb_chars))
    let remainder = nb_columns % nb_chars
  else
    let nb_insertions = nb_columns / nb_chars
  endif
  let saveFormatoptions = &formatoptions
  set formatoptions-=o
  execute "normal! o\<esc>"
  let &formatoptions = saveFormatoptions
  if has('float')
    execute 'normal! ' . float2nr(nb_insertions) . 'i' . chars . "\<esc>"
    if !empty(remainder)
      execute 'normal! A' . strpart(chars, 0, remainder) . "\<esc>"
    endif
  else
    execute 'normal! ' . nb_insertions . 'i' . chars . "\<esc>"
  endif
endfunction
command! -nargs=? Underline call <sid>Underline(<q-args>)
" Underline mappings
nnoremap <silent> <leader>u :Underline -<CR>
nnoremap <silent> <leader>U :Underline =<CR>
nnoremap <silent> <leader>uu :Underline -<CR>
nnoremap <silent> <leader>UU :Underline =<CR>
" Requires NERDCommenter
nnoremap <silent> <leader>uc :Underline -<CR>
      \Vk:call NERDComment(1, 'alignBoth')<CR>
nnoremap <silent> <leader>Uc :Underline =<CR>
      \Vk:call NERDComment(1, 'alignBoth')<CR>

" Change file permissions
" -----------------------
" chmod of current file
command! -nargs=? Chmod :!chmod <q-args> "%"
nnoremap <silent> <leader>X :Chmod +x<CR>

" Quickfix window and location list mappings.
" -------------------------------------------
" Show quickfix window for current search with <leader>q/
nnoremap <silent> <leader>q/ :execute 'vimgrep /'.@/.'/g %'<CR>:copen<CR>
" Further quickfix mappings
nnoremap <leader>qo :copen<CR>
nnoremap <leader>qc :cclose<CR>
nnoremap ]q :cnext<CR>
nnoremap [q :cprevios<CR>
" Some locationlist mappings
nnoremap <leader>lo :lopen<CR>
nnoremap <leader>lc :lclose<CR>
nnoremap ]l :lnext<CR>
nnoremap [l :cprevious<CR>

" Toggle automatic formatting
" ---------------------------
map <silent> <Leader>f :if &formatoptions =~# 'a' <Bar>
      \ set formatoptions-=a <Bar>
      \ else <Bar>
      \ set formatoptions+=a <Bar>
      \ endif<CR>

" Single line scrolling
" ---------------------
nmap <C-PageUP> <C-Y>
nmap <C-PageDown> <C-E>
imap <C-PageUP> <C-o><C-Y>
imap <C-PageDown> <C-o><C-E>

" Text bubbling
" -------------
" [http://vimcasts.org/episodes/bubbling-text/]
" Requires the unimpared.vim package.
nmap <C-Up> [e
nmap <C-Down> ]e
vmap <C-Up> [egv
vmap <C-Down> ]egv


" ======================================================================
"  Auto commands
" ======================================================================
" Various autocommands. Mainly, custom file-type detection and file-type
" settings.

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " filetype settings
  autocmd FileType text,txt setlocal autoindent
  autocmd FileType gitconfig,make,snippet setlocal sw=8 noexpandtab
  autocmd FileType html,css,scss,ruby,yaml,vim,sh,tex
	\ setlocal sts=2 sw=2
  autocmd FileType vim setlocal foldmethod=marker
  autocmd BufNewFile,BufRead [._]vimrc,vimrc,[._]gvimrc,gvimrc
        \ setlocal foldexpr=Foldexpr_vimrc(v:lnum)
        \ foldtext=Foldtext_vimrc()
        \ foldmethod=expr
  autocmd FileType c,cpp setlocal sw=4 noexpandtab
  autocmd FileType python setlocal sw=4 sts=4 nowrap expandtab
	\ foldmethod=indent foldnestmax=2 foldcolumn=2
  autocmd FileType javascript setlocal sts=4 sw=4 noexpandtab
  autocmd BufNewFile,BufRead *.rss setfiletype xml
  " list view
  autocmd FileType c,cpp,sh,python,tex,make setlocal list
  " formatoptions
  autocmd FileType c,cpp,sh,python,make setlocal formatoptions=croqn
  autocmd FileType tex setlocal formatoptions=tcroqlwn
  autocmd FileType text,txt setlocal formatoptions=tcroqn
  autocmd FileType text,txt,c,cpp,tex,sh,python setlocal textwidth=78
  " to use an external format program use
  "   :set formatprg=par
  "   :set formatprg=par\ -w78

  " C++ include path
  let s:gpppath='g++ -v 2>&1 ' .
	\ '|sed -r ''/--with-gxx-include-dir=/!d;' .
	\ 's/.*--with-gxx-include-dir=(\S*).*/\1/'''
  autocmd FileType cpp exec 'setlocal path+='.system(s:gpppath)
  autocmd BufNewFile,BufRead /usr/include/c++* setfiletype cpp

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  " Lädt automatisch abhängig von der Dateiendung ein Template, sofern
  " vorhanden Aus "Hacking Vim" von Kim Schulz
  if has("autocmd")
    autocmd BufNewFile * silent! 0r $HOME/.vim/templates/%:e.tpl
  endif

  augroup END

  " Automatically source vimrc file after editing it.
  " TODO: Sure that this is a good idea?
  augroup config
    au!
    autocmd bufwritepost .vimrc source $MYVIMRC |
	  \if has('gui_running') | source $MYGVIMRC | endif | let &ft=&ft
    autocmd bufwritepost .gvimrc if has('gui_running') |
	  \source $MYGVIMRC | let &ft=&ft | endif
  augroup END

endif " has("autocmd")


" ######################################################################
